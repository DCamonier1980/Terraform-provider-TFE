name: Nightly TFE Tests
on:
  workflow_dispatch:
  schedule:
    - cron: 0 0 * * *

jobs:
  instance:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Build nightly tflocal instance
        uses: brandonc/terraform-cloud-run-action@v1
        with:
          token: ${{ secrets.TF_WORKFLOW_TFLOCAL_CLOUD_TFC_TOKEN }}
          organization: "hashicorp-v2"
          workspace: tflocal-terraform-provider-tfe-nightly
          wait: true

  tests:
    needs: instance
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        parallel: [3]
        index: [0, 1, 2]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
          cache: true

      - name: Sync dependencies
        run: |
          go get -v -t -d ./...
          go mod tidy

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Download artifact
        id: download-artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow_conclusion: success
          name: junit-test-summary
          if_no_artifact_found: warn
          branch: main

      - name: Split acceptance tests
        id: test_split
        uses: brandonc/go-test-split-action@v1
        with:
          index: ${{ matrix.index }}
          total: ${{ matrix.parallel }}
          junit-summary: ./ci-summary-provider.xml

      - name: terraform-cloud-outputs
        id: tflocal
        uses: brandonc/terraform-cloud-outputs-action@v1
        with:
          token: ${{ secrets.TF_WORKFLOW_TFLOCAL_CLOUD_TFC_TOKEN }}
          organization: hashicorp-v2
          workspace: tflocal-go-tfe-nightly

      - name: Run Tests
        env:
          TFE_HOSTNAME: ${{fromJSON(steps.tflocal.outputs.workspace-outputs-json).tfe_hostname}}
          TFE_TOKEN: ${{fromJSON(steps.tflocal.outputs.workspace-outputs-json).tfe_token}}
          TFE_USER1: tfe-provider-user1
          TFE_USER2: tfe-provider-user2
          TF_ACC: "1"
          ENABLE_TFE: "1"
          TFC_RUN_TASK_URL: "https://httpstat.us/200"
          GITHUB_POLICY_SET_IDENTIFIER: "hashicorp/test-policy-set"
          GITHUB_REGISTRY_MODULE_IDENTIFIER: "hashicorp/terraform-random-module"
          GITHUB_WORKSPACE_IDENTIFIER: "hashicorp/terraform-random-1"
          GITHUB_WORKSPACE_BRANCH: "test"
          GITHUB_TOKEN: "${{ secrets.TESTING_GITHUB_TOKEN }}"
          MOD_PROVIDER: github.com/hashicorp/terraform-provider-tfe
          MOD_TFE: github.com/hashicorp/terraform-provider-tfe/tfe
          MOD_VERSION: github.com/hashicorp/terraform-provider-tfe/version
        run: |
          gotestsum --format short-verbose -- $MOD_PROVIDER $MOD_TFE $MOD_VERSION -timeout=30m -run "${{ steps.test_split.outputs.run }}"

  tests-summarize:
    needs: [tests]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Check tests Status
        run: |
          if [ "${{ needs.tests.result }}" = "success" ]; then
            exit 0
          fi
          exit 1

  slack-notify:
    needs: tests-summarize
    if: always() && (needs.tests-summarize.result == 'failure')
    runs-on: ubuntu-latest
    steps:
      - name: Send slack notification on failure
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": ":x::moon::sob: Nightly TFE tests *FAILED*",
              "attachments": [
                {
                  "color": "#C41E3A",
                  "blocks": [
                    {
                      "type": "section",
                      "fields": [
                        {
                          "type": "mrkdwn",
                          "text": "*Workflow:*\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  cleanup:
    runs-on: ubuntu-latest
    needs: [tests-summarize]
    if: "${{ always() }}"
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
          check-latest: true
          cache: true

      - name: Destroy nightly tflocal instance
        uses: brandonc/terraform-cloud-run-action@v1
        with:
          token: ${{ secrets.TF_WORKFLOW_TFLOCAL_CLOUD_TFC_TOKEN }}
          organization: "hashicorp-v2"
          workspace: tflocal-terraform-provider-tfe-nightly
          wait: true
          is-destroy: true
